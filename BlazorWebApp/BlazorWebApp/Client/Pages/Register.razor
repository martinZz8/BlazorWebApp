@page "/register"
@inject IUnitService UnitService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        You cannot register while logged in.
    </Authorized>
    <NotAuthorized Context="mainContext">
        <h3>Register</h3>

        <EditForm Model="user" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-group">
                <label for="email" class="required">Email</label>
                <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
                <ValidationMessage For="@(() => user.Email)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="email" @bind-Value="user.Username" class="form-control"></InputText>
                <ValidationMessage For="@(() => user.Username)"></ValidationMessage>
            </div>
            <label for="password" class="required">Password</label>
            <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
            <ValidationMessage For="@(() => user.Password)"></ValidationMessage>
            <div class="form-group">
                <label for="confirmPassword">Confirm password</label>
                <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password"></InputText>
                <ValidationMessage For="@(() => user.ConfirmPassword)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="bio">Bio</label>
                <InputTextArea id="bio" @bind-Value="user.Bio" class="form-control"></InputTextArea>
                <ValidationMessage For="@(() => user.Bio)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="startUnit">Start Unit</label>
                @*
                <InputSelect id="startUnit" @bind-Value="user.StartUnitId" class="form-control">
                    @foreach (var unit in UnitService.Units)
                    {
                        <option value="@unit.Id">@unit.Title</option>
                    }
                </InputSelect>
                *@
                <br>
                <InputRadioGroup id="startUnit" @bind-Value="user.StartUnitId" class="form-control">
                    @foreach (var unit in UnitService.Units)
                    {
                        <InputRadio Value="@unit.Id" /><span style="padding-left: 5px;">@unit.Title</span><br>
                    }
                </InputRadioGroup>
            </div>
            <div class="form-group">
                <label for="bananas">Bananas</label>
                <InputNumber id="bananas" @bind-Value="user.Bananas" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => user.Bananas)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="dateOfBirth">Date of Birth</label>
                <InputDate id="dateOfBirth" @bind-Value="user.DateOfBirth" class="form-control"></InputDate>
                <ValidationMessage For="@(() => user.DateOfBirth)"></ValidationMessage>
            </div>
            <div class="form-check">
                <InputCheckbox id="confirmed" @bind-Value="user.isConfirmed" class="form-check-input"></InputCheckbox>
                <label for="confirmed" class="form-check-label">Confirmed</label>
                <ValidationMessage For="@(() => user.isConfirmed)"></ValidationMessage>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </EditForm>
    </NotAuthorized>
</AuthorizeView>

@code {
    public UserRegister user = new UserRegister();

    public void HandleRegistration()
    {
        JSRuntime.InvokeVoidAsync("console.log", "This is new user: ", user);
        NavigationManager.NavigateTo("");
    }
}
